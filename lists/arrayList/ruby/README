ArrayList
By Scott Hall

This implementation of the ArrayList data structure is done in Ruby.  Ruby
allows multiple different data types (objects) to exist in its arrays.  For that
reason a 'strict' argument is added to the initialization of the ArrayList
class that, when set to true, will ensure that data types are all of the same
type in the list.  The datatype chosen is based on the first one passed.  After
that all added items must be the same data type or else an error is thrown.
If you wish for strict data typing to be disabled then simply pass false to the
ArrayList initializer.  This implementation takes advantage of Ruby's built-in
convenience features such as removing items from the array.

The features implemented for this data structure are described below.
    o  Create the list.  List is initialized to empty state
    o  Determine whether the list is full
    o  Determine whether the list is empty
    o  Find the size of the list
    o  Destroy/Clear the list
    o  Determine whether an item is the same as a given list element
    o  Insert an item in the list at a specified location
    o  Remove an item from the list at a specified location
    o  Replace an item at a specified location with another item
    o  Retrieve an item at a specified location with another item
    o  Search the list for a given item

To view the small test suite connected to this program simply launch
ArrayList.rb with your Ruby interpreter.

    ruby ArrayList.rb

I used Ruby 2.5.1p57 on x86_64-linux-gnu for this development.
